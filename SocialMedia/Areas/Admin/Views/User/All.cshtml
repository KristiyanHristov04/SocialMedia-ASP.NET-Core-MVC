@using SocialMedia.Areas.Admin.ViewModels.User
@model AllViewModel
@inject IAdminChatService adminChatService

@{
    ViewData["Title"] = "Users";
    string currentAdminUsername = this.User.FindFirst(ClaimTypes.Name)!.Value;
    List<AdminMessageViewModel> messages = await adminChatService.LoadMessagesFromDatabaseAsync();

    int rowCount = 0;

    if (Model.CurrentPage == 1)
    {
        rowCount = 1;
    }
    else
    {
        rowCount = (Model.CurrentPage - 1) * AllViewModel.UsersPerPage + 1;
    }


    int previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    int totalPages
        = (int)Math.Ceiling(Model.TotalUsers * 1.0m / AllViewModel.UsersPerPage);

    string currentUserRole = string.Empty;

    if (this.User.IsInRole("SuperAdministrator"))
    {
        currentUserRole = "SuperAdministrator";
    }
    else
    {
        currentUserRole = "Administrator";
    }
}

<form method="get">
    <div class="d-flex gap-3 mb-3">
        <div class="w-100">
            <label asp-for="Filter" class="text-white">Filter:</label>
            <select class="form-select" asp-for="Filter">
                <option disabled selected> -- select an option -- </option>
                <option value="newest">Sort By Newest Users</option>
                <option value="oldest">Sort By Oldest Users</option>
            </select>
        </div>
        <div class="align-self-end d-flex gap-1">
            <button class="btn-apply btn" type="submit">Apply</button>
            <a class="btn-clear btn" asp-controller="User" asp-action="All">Clear</a>
        </div>
    </div>
</form>

<div class="table-responsive-md">
    <table class="table table-dark table-striped align-middle text-center">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Full Name</th>
                <th scope="col">Username</th>
                <th scope="col">Email</th>
                <th scope="col">Joined Date</th>
                <th scope="col">Role</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Users)
            {
                <tr>
                    <th scope="row">@(rowCount++)</th>
                    <td>@user.UserFullName</td>
                    <td>@user.UserUsername</td>
                    <td>@user.UserEmail</td>
                    <td>@user.JoinedDate</td>
                    <td>
                        @(user.UserRole ?? "User")
                    </td>
                    <td>
                        @if (currentUserRole == "Administrator")
                        {
                            if (string.IsNullOrEmpty(user.UserRole) || user.UserRole == "User")
                            {
                                <a class="btn btn-success"
                                   asp-area="Admin"
                                   asp-controller="User"
                                   asp-action="Promote"
                                   asp-route-id="@user.UserId">
                                    Promote
                                </a>
                            }
                        }
                        else if (currentUserRole == "SuperAdministrator")
                        {
                            if (string.IsNullOrEmpty(user.UserRole) || user.UserRole == "User")
                            {
                                <a class="btn-promote btn btn-success"
                                   asp-area="Admin"
                                   asp-controller="User"
                                   asp-action="Promote"
                                   asp-route-id="@user.UserId">
                                    Promote
                                </a>
                            }

                            if (user.UserRole == "Administrator")
                            {
                                <a class="btn-demote btn"
                                   asp-area="Admin"
                                   asp-controller="User"
                                   asp-action="Demote"
                                   asp-route-id="@user.UserId">
                                    Demote
                                </a>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="d-flex justify-content-between">

    @if (Model.CurrentPage == 1)
    {
        <button class="btn btn-primary" disabled>
            Previous
        </button>
    }
    else
    {
        <a asp-controller="User" asp-action="All" asp-route-currentPage="@previousPage" asp-route-filter="@Model.Filter" class="btn btn-primary">
            Previous
        </a>
    }

    @if (Model.CurrentPage + 1 > totalPages)
    {
        <button class="btn btn-primary" disabled>
            Next
        </button>
    }
    else
    {
        <a asp-controller="User" asp-action="All" asp-route-currentPage="@(Model.CurrentPage + 1)" asp-route-filter="@Model.Filter" class="btn btn-primary">
            Next
        </a>
    }
</div>

<div class="chat-icon">
    <i class="fa-solid fa-message"></i>
</div>

<div class="chat-container d-flex flex-column justify-content-between d-none">
    <div class="first-column d-flex justify-content-between">
        <p class="m-0">Admin Chat</p>
        <div class="x-icon">
            <i class="fa-solid fa-xmark"></i>
        </div>
    </div>

    <div class="second-column d-flex flex-column justify-content-between">
        <ul id="messages-list">
            @foreach (var adminMessage in messages)
            {
                <li>@adminMessage.Username: @adminMessage.Message</li>
            }
        </ul>
        <div class="admin-input-container d-flex justify-content-between">
            <input type="text" class="w-100 me-1" id="message-input" placeholder="Message" />
            <button id="send-button" class="btn">Send <i class="fa-solid fa-paper-plane"></i></button>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/user-all.css" />
    <link rel="stylesheet" href="~/css/admin-chat.css" />
}

@section Scripts {
    @if (TempData["Promoted"] != null)
    {
        <script>
            toastr.options = {
                positionClass: "toast-bottom-right"
            };

            toastr.success('@TempData["Promoted"]');
        </script>
    }

    <script src="~/js/dismiss-button.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        let chatContainer = document.getElementsByClassName('chat-container')[0];
        let chatIcon = document.getElementsByClassName('chat-icon')[0];
        let xMarkButton = document.getElementsByClassName('fa-xmark')[0];

        chatIcon.addEventListener('click', () => {
            console.log('Clicking on Message');
            chatContainer.classList.remove('d-none');
        });

        xMarkButton.addEventListener('click', () => {
            console.log('Clicking on X');
            chatContainer.classList.add('d-none');
        });

        let currentAdminUsername = '@@@currentAdminUsername';

        var connection = new signalR.HubConnectionBuilder().withUrl("/adminChatHub").build();

        //Disable the send button until connection is established.
        document.getElementById("send-button").disabled = true;

        connection.on("ReceiveMessage", function (user, message) {
            var li = document.createElement("li");
            document.getElementById("messages-list").appendChild(li);
            // We can assign user-supplied strings to an element's textContent because it
            // is not interpreted as markup. If you're assigning in any other way, you
            // should be aware of possible script injection concerns.
            li.textContent = `${user}: ${message}`;
        });

        connection.start().then(function () {
            document.getElementById("send-button").disabled = false;
        }).catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("send-button").addEventListener("click", function (event) {
            var message = document.getElementById("message-input").value;
            if (message.length > 0) {
                document.getElementById("message-input").value = '';
                connection.invoke("SendMessage", currentAdminUsername, message).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();
            }
        });
    </script>
}